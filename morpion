=begin
I need a board, players, positions on a board (aka a cell) and the tic-tac-toe game playing, 
aka moves and "what happens next"
Des boucles dans une boucle

Board : à l'initialisation, le plateau doit instancier 9 BoardCases. 
Le plateau doit s'occuper de faire le lien entre les BoardCases et le Game : 
il change les valeurs des BoardCases (de empty à X ou O), vérifie en fonction de la combinaison 
des BoardCases si un joueur enchaine trois symboles d'affichés.
BoardCase : un BoardCase renseigne de l'état d'une case : soit elle est vide (personne n'a joué dessus), soit elle a comme valeur X, soit elle a comme valeur O
Player : un joueur a un nom (habile), et un état (victoire s'il a gagné)
Game : cette classe s'occupe de gérer toute la partie. À l'initialisation elle créé 2 instance de Player, et 1 instance de Board (l'instance de Board, initialise 9 instances de BoardCases). Game s'occupe de finir la partie si un joueur a gagné, de demander aux utilisateurs où ils veulent jouer à chaque tour
Comment afficher ?
Pour afficher le plateau, c'est plus simple que cela en a l'air. Il faut afficher une méthode to_s (to_string, une méthode qui marche pour les classes array, integer, etc) qui renvoie le plateau (ou les cases) au format string.
=end

class BoardCase
  #TO DO : la classe a 2 attr_accessor, sa valeur (X, O, ou vide), ainsi que son numéro de case)
  attr_accessor :value, :board_case_number
  @value = [ "X" => x, "0" => o, "" => nil ]
  @board_case_number=[1..9]

3.times do |row_index|
   board[row_index] = []
   3.times do |column_index|
      board[column_index] = []
      board[row_index][column_index] = nil
   end
end


class Cell
    attr_accessor :value
  
  def initialize(value = "")
      @value = value
  end

  def initialize(value, board_case_number)
    #TO DO doit régler sa valeur, ainsi que son numéro de case
    @value=value
    @board_case_number=board_case_number
  end
  
  def to_s
    #TO DO : doit renvoyer la valeur au format string
    return value.to_s
  end
=begin
  def x?   
    value == "X"
  end

  def o?
    value == "O"
  end

  def empty?
    !(o? || x?) 
  end
=end

class Board
  include Enumerable
  #TO DO : la classe a 1 attr_accessor, une array qui contient les BoardCases
  attr_accessor([1..9])

  def initialize
    #TO DO :
    #Quand la classe s'initialize, elle doit créer 9 instances BoardCases
    #Ces instances sont rangées dans une array qui est l'attr_accessor de la classe
    attr_accessor([board_case_number_1..9])
    #@instance_1
    #@instance_2
    #@instance_3
    #@instance_4
    #@instance_5
    #@instance_6
    #@instance_7
    #@instance_8
    #@instance_9
    
  end

  def board_case(number)
    cases.find{|board_case| board_case.number == number}
  end

  def to_s
  #TO DO : afficher le plateau
  display.Board
  end

  def play
    #TO DO : une méthode qui change la BoardCase jouée en fonction de la valeur du joueur (X, ou O)
    #(X,0)
  end

  def victory?
    #TO DO : qui gagne ?
  end

class Player
  #TO DO : la classe a 2 attr_accessor, son nom, sa valeur (X ou O). Elle a un attr_writer : il a gagné ?
  attr_accessor(:name, :value_boolean)
  attr_writer(:wins_boolean)
  
  def initialize
    #TO DO : doit régler son nom, sa valeur, son état de victoire
  end

class Game
  def initialize(player1,player2)
    @player1="Starsky"
    @player2="Hutch"
  end

  def go
    game.run
  end

  def turn
    #TO DO : affiche le plateau, demande au joueur il joue quoi, vérifie si un joueur a gagné, passe au joueur suivant si la partie n'est pas finie
  display.Board 
  if #game_over: false
    for player.each puts "What are you playing ?"  
      gets.chomp
        if #player_won puts "#{@player} won"
        #next_player
        else
        #next_player
        end
    end
  else 
    puts "Game over. The winner is #{@player_won} !"
  end

end

Game.new
